import {
  Duration,
  ProtocolBuilder,
  Session,
  SessionTo,
  toJvmDuration,
  underlyingSessionTo,
  wrapSession
} from "@gatling.io/core";

import { GrpcHeaders, wrapGrpcHeaders } from "./headers";

import JvmGrpcProtocolBuilder = io.gatling.javaapi.grpc.GrpcProtocolBuilder;
import { GrpcDslAddons, ChannelCredentials, toJvmCredentials, underlyingSessionToCredentials } from "./grpc";

export interface GrpcProtocolBuilder extends GrpcHeaders<GrpcProtocolBuilder>, ProtocolBuilder {
  //public GrpcProtocolBuilder callCredentials(@NonNull Function<Session, CallCredentials> credentials) {
  //public GrpcProtocolBuilder callCredentials(@NonNull String credentials) {
  //public GrpcProtocolBuilder callCredentials(@NonNull CallCredentials credentials) {
  channelCredentials(credentials: ChannelCredentials): GrpcProtocolBuilder;
  channelCredentials(credentials: string): GrpcProtocolBuilder;
  channelCredentials(credentials: (session: Session) => ChannelCredentials): GrpcProtocolBuilder;
  forAddress(host: string, port: number): GrpcProtocolBuilder;
  forTarget(target: string): GrpcProtocolBuilder;
  overrideAuthority(authority: string): GrpcProtocolBuilder;
  shareChannel(): GrpcProtocolBuilder;
  shareSslContext(): GrpcProtocolBuilder;
  useChannelPool(poolSize: number): GrpcProtocolBuilder;
  usePlaintext(): GrpcProtocolBuilder;
  useInsecureTrustManager(): GrpcProtocolBuilder;
  useStandardTrustManager(): GrpcProtocolBuilder;
  useCustomCertificateTrustManager(certificatePath: string): GrpcProtocolBuilder;
  useCustomLoadBalancingPolicy(policy: string): GrpcProtocolBuilder;
  // FIXME jsonPolicyConfig?
  useCustomLoadBalancingPolicy(policy: string, jsonPolicyConfig: string): GrpcProtocolBuilder;
  usePickFirstLoadBalancingPolicy(): GrpcProtocolBuilder;
  usePickRandomLoadBalancingPolicy(): GrpcProtocolBuilder;
  useRoundRobinLoadBalancingPolicy(): GrpcProtocolBuilder;
}

export const wrapGrpcProtocolBuilder = (_underlying: JvmGrpcProtocolBuilder): GrpcProtocolBuilder => ({
  _underlying,
  ...wrapGrpcHeaders(_underlying, wrapGrpcProtocolBuilder),
  //public GrpcProtocolBuilder callCredentials(@NonNull Function<Session, CallCredentials> credentials) {
  //public GrpcProtocolBuilder callCredentials(@NonNull String credentials) {
  //public GrpcProtocolBuilder callCredentials(@NonNull CallCredentials credentials) {
  channelCredentials: (credentials) =>
    wrapGrpcProtocolBuilder(
      typeof credentials === "string"
        ? GrpcDslAddons.channelCredentialsEL(_underlying, credentials)
        : typeof credentials === "function"
          ? _underlying.channelCredentials(underlyingSessionToCredentials(credentials))
          : _underlying.channelCredentials(toJvmCredentials(credentials))
    ),
  forAddress: (host, port) => wrapGrpcProtocolBuilder(_underlying.forAddress(host, port)),
  forTarget: (target) => wrapGrpcProtocolBuilder(_underlying.forTarget(target)),
  overrideAuthority: (authority) => wrapGrpcProtocolBuilder(_underlying.overrideAuthority(authority)),
  shareChannel: () => wrapGrpcProtocolBuilder(_underlying.shareChannel()),
  shareSslContext: () => wrapGrpcProtocolBuilder(_underlying.shareSslContext()),
  useChannelPool: (poolSize) => wrapGrpcProtocolBuilder(_underlying.useChannelPool(poolSize)),
  usePlaintext: () => wrapGrpcProtocolBuilder(_underlying.usePlaintext()),
  useInsecureTrustManager: () => wrapGrpcProtocolBuilder(_underlying.useInsecureTrustManager()),
  useStandardTrustManager: () => wrapGrpcProtocolBuilder(_underlying.useStandardTrustManager()),
  useCustomCertificateTrustManager: (certificatePath) =>
    wrapGrpcProtocolBuilder(_underlying.useCustomCertificateTrustManager(certificatePath)),
  useCustomLoadBalancingPolicy: (policy, jsonPolicyConfig?: string) =>
    wrapGrpcProtocolBuilder(
      typeof jsonPolicyConfig === "undefined"
        ? _underlying.useCustomLoadBalancingPolicy(policy)
        : _underlying.useCustomLoadBalancingPolicy(policy, jsonPolicyConfig)
    ),
  usePickFirstLoadBalancingPolicy: () => wrapGrpcProtocolBuilder(_underlying.usePickFirstLoadBalancingPolicy()),
  usePickRandomLoadBalancingPolicy: () => wrapGrpcProtocolBuilder(_underlying.usePickRandomLoadBalancingPolicy()),
  useRoundRobinLoadBalancingPolicy: () => wrapGrpcProtocolBuilder(_underlying.useRoundRobinLoadBalancingPolicy())
});

export const grpcProtocolBuilder = wrapGrpcProtocolBuilder(
  // GrpcDsl.grpc doesn't get properly generated by java2ts because of conflicts with methods of the same name
  Java.type<any>("io.gatling.javaapi.grpc.GrpcDsl").grpc
);
