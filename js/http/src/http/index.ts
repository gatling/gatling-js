import * as core from "@gatling.io/core";

import { HttpDsl as JvmHttpDsl } from "@gatling.io/jvm-types";
import JvmHttp = io.gatling.javaapi.http.Http;
import JvmHttpProtocolBuilder = io.gatling.javaapi.http.HttpProtocolBuilder;
import JvmHttpRequestActionBuilder = io.gatling.javaapi.http.HttpRequestActionBuilder;

export interface HttpProtocolBuilder extends core.ProtocolBuilder {
  baseUrl(url: string): HttpProtocolBuilder;
}

const wrapHttpProtocolBuilder = (_underlying: JvmHttpProtocolBuilder): HttpProtocolBuilder => ({
  _underlying,
  baseUrl: (url: string): HttpProtocolBuilder => wrapHttpProtocolBuilder(_underlying.baseUrl(url))
});

const httpProtocolBuilder: HttpProtocolBuilder = wrapHttpProtocolBuilder(
  // HttpDsl.http doesn't get properly generated by java2ts because of conflicts with methods of the same name
  Java.type<any>("io.gatling.javaapi.http.HttpDsl").http
);

export interface RequestActionBuilder extends core.ActionBuilder {}
export interface HttpRequestActionBuilder extends RequestActionBuilder {}

const wrapHttpRequestActionBuilder = (_underlying: JvmHttpRequestActionBuilder): HttpRequestActionBuilder => ({
  _underlying
});

type Name = string | core.SessionToString;

export interface Http {
  get(url: Name): HttpRequestActionBuilder;
}

const wrapHttp = (jvmHttp: JvmHttp): Http => ({
  get: (url: Name): HttpRequestActionBuilder => {
    // Handle overloading
    const jvmHttpRequestActionBuilder =
      typeof url === "string" ? jvmHttp.get(url) : jvmHttp.get(core.underlyingSessionToString(url));
    return wrapHttpRequestActionBuilder(jvmHttpRequestActionBuilder);
  }
});

const httpApply = (name: Name): Http => {
  // Handle overloading
  const jvmHttp =
    typeof name === "string" ? JvmHttpDsl.http(name) : JvmHttpDsl.http(core.underlyingSessionToString(name));
  return wrapHttp(jvmHttp);
};

export const http: ((name: Name) => Http) & HttpProtocolBuilder = Object.assign(httpApply, httpProtocolBuilder);
