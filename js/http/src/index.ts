import { Expression, Session, wrapSession } from "@gatling.io/core";
import { underlyingSessionTo } from "@gatling.io/core";
import { HttpDsl as JvmHttpDsl } from "@gatling.io/jvm-types";

import { HttpProtocolBuilder, wrapHttpProtocolBuilder } from "./protocol";
import { HttpRequestActionBuilder, Request, wrapHttpRequestActionBuilder, wrapRequest } from "./request";

export * from "./protocol";
export * from "./proxy";
export * from "./request";

import JvmHttp = io.gatling.javaapi.http.Http;
import JvmRequest = io.gatling.http.client.Request;
import JvmSession = io.gatling.javaapi.core.Session;

export type RequestTransform = (request: Request, session: Session) => Request;

export const underlyingRequestTransform =
  (f: RequestTransform): ((jvmRequest: JvmRequest, jvmSession: JvmSession) => JvmRequest) =>
  (jvmRequest: JvmRequest, jvmSession: JvmSession) =>
    f(wrapRequest(jvmRequest), wrapSession(jvmSession))._underlying;

const httpProtocolBuilder: HttpProtocolBuilder = wrapHttpProtocolBuilder(
  // HttpDsl.http doesn't get properly generated by java2ts because of conflicts with methods of the same name
  Java.type<any>("io.gatling.javaapi.http.HttpDsl").http
);

export interface Http {
  get(url: string): HttpRequestActionBuilder;
  get(url: (session: Session) => string): HttpRequestActionBuilder;
}

const wrapHttp = (jvmHttp: JvmHttp): Http => ({
  get: (url: Expression<string>): HttpRequestActionBuilder => {
    // Handle overloading
    const jvmHttpRequestActionBuilder =
      typeof url === "string" ? jvmHttp.get(url) : jvmHttp.get(underlyingSessionTo(url));
    return wrapHttpRequestActionBuilder(jvmHttpRequestActionBuilder);
  }
});

const httpApply = (requestName: Expression<string>): Http => {
  // Handle overloading
  const jvmHttp =
    typeof requestName === "string" ? JvmHttpDsl.http(requestName) : JvmHttpDsl.http(underlyingSessionTo(requestName));
  return wrapHttp(jvmHttp);
};

export const http: ((requestName: Expression<string>) => Http) & HttpProtocolBuilder = Object.assign(
  httpApply,
  httpProtocolBuilder
);
