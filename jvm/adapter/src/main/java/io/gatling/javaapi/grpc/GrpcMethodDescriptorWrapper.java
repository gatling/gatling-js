/*
 * Copyright 2011-2025 GatlingCorp (https://gatling.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.gatling.javaapi.grpc;

import com.google.protobuf.Descriptors;
import com.google.protobuf.DynamicMessage;
import io.grpc.MethodDescriptor;
import io.grpc.protobuf.ProtoMethodDescriptorSupplier;
import io.grpc.protobuf.ProtoUtils;

public final class GrpcMethodDescriptorWrapper {
  private final Descriptors.Descriptor inputDescriptor;
  private final Descriptors.Descriptor outputDescriptor;
  private final MethodDescriptor<DynamicMessage, DynamicMessage> descriptor;

  public GrpcMethodDescriptorWrapper(Descriptors.MethodDescriptor methodDescriptor) {
    this.inputDescriptor = methodDescriptor.getInputType();
    this.outputDescriptor = methodDescriptor.getOutputType();

    final var serviceDescriptor = methodDescriptor.getService();
    final var fileDescriptor = serviceDescriptor.getFile();
    final MethodDescriptor.MethodType methodType;
    if (methodDescriptor.isClientStreaming() && methodDescriptor.isServerStreaming()) {
      methodType = MethodDescriptor.MethodType.BIDI_STREAMING;
    } else if (methodDescriptor.isClientStreaming()) {
      methodType = MethodDescriptor.MethodType.CLIENT_STREAMING;
    } else if (methodDescriptor.isServerStreaming()) {
      methodType = MethodDescriptor.MethodType.SERVER_STREAMING;
    } else {
      methodType = MethodDescriptor.MethodType.UNARY;
    }
    this.descriptor =
        MethodDescriptor.<DynamicMessage, DynamicMessage>newBuilder()
            .setType(methodType)
            .setFullMethodName(serviceDescriptor.getFullName() + "/" + methodDescriptor.getName())
            .setSampledToLocalTracing(true)
            .setRequestMarshaller(dynamicMarshaller(inputDescriptor))
            .setResponseMarshaller(dynamicMarshaller(outputDescriptor))
            // the schemaDescriptor type is unspecified, but ProtoMethodDescriptorSupplier is what
            // is used in java code generated by protoc
            .setSchemaDescriptor(
                new ProtoMethodDescriptorSupplier() {
                  @Override
                  public Descriptors.FileDescriptor getFileDescriptor() {
                    return fileDescriptor;
                  }

                  @Override
                  public Descriptors.ServiceDescriptor getServiceDescriptor() {
                    return serviceDescriptor;
                  }

                  @Override
                  public Descriptors.MethodDescriptor getMethodDescriptor() {
                    return methodDescriptor;
                  }
                })
            .build();
  }

  public Descriptors.Descriptor inputDescriptor() {
    return inputDescriptor;
  }

  public Descriptors.Descriptor outputDescriptor() {
    return outputDescriptor;
  }

  public MethodDescriptor<DynamicMessage, DynamicMessage> descriptor() {
    return descriptor;
  }

  public DynamicMessage.Builder newInputBuilder() {
    return DynamicMessage.newBuilder(inputDescriptor);
  }

  private MethodDescriptor.Marshaller<DynamicMessage> dynamicMarshaller(
      Descriptors.Descriptor messageDescriptor) {
    return ProtoUtils.marshaller(DynamicMessage.newBuilder(messageDescriptor).buildPartial());
  }
}
